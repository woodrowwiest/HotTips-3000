/*
DIY SpotWelder - HotTips-3000

Please use caution while dealing with mains voltage :)

  Parts Include:
  - Microwave transformer, secondary rewound with single turn 70mm^2 stranded copper
  - ArduinoProMini
  - OLED Display, Potentiometer, Pushbutton, LED's x2, resistor x2, some wires and perfboard
  - 5VDC 850mA switch mode USB power supply
  - 40 Ampere 24-380VAC Solid state relay (3-30VDC input)
  - Powercord, powerswitch, and enclosure

Most code my own @intentionalrobots
  Woodrow Wiest - https://www.instagram.com/intentionalrobots/


Many thanks and much inspiration gleaned from:
  Spot Welder Timer Example
  Check out the instructable here - http://www.instructables.com/id/DIY-Spot-Welder-From-Microwave/  
  Jack Davies, http://jackdaviesdesign.com <<< >>> http://undergroundengineering.co.uk


Would love to see if you make one!
  wwiest@gmail.com 
*/



#include "U8glib.h"                                   // For writing to OLED Display

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE|U8G_I2C_OPT_DEV_0);  // I2C / TWI - set display

#define w3_logo_width 87                              // Bootup logo begin
#define w3_logo_height 68
static unsigned char w3_logo_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
   0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00,
   0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x80, 0x1b,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x18, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x18, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x60, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x60, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x60, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70,
   0x00, 0x01, 0x18, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00,
   0x01, 0x1c, 0x00, 0x80, 0x03, 0x00, 0x00, 0x70, 0x00, 0x70, 0x80, 0x01,
   0x1c, 0x00, 0xc0, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x70, 0xc0, 0x01, 0x1c,
   0x00, 0x60, 0x00, 0x00, 0x00, 0x80, 0x01, 0x70, 0xd8, 0xe3, 0x0c, 0x00,
   0x30, 0x00, 0x00, 0x00, 0x00, 0x03, 0x70, 0xec, 0xc7, 0x0c, 0x00, 0x18,
   0x00, 0x00, 0x00, 0x00, 0x02, 0xf0, 0x8e, 0x8f, 0x0e, 0x00, 0x0c, 0x00,
   0x00, 0x00, 0x00, 0x06, 0xf0, 0x86, 0x89, 0x0f, 0x00, 0x06, 0x00, 0x00,
   0x00, 0x00, 0x04, 0xe0, 0x83, 0x81, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00,
   0x00, 0x0c, 0xe0, 0x83, 0x01, 0x07, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00,
   0x08, 0xe0, 0x87, 0x81, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
   0xc0, 0xcf, 0xc3, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xc0,
   0xff, 0xff, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0xff,
   0xff, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0xff, 0xff,
   0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xc0, 0xfc, 0xff, 0x02,
   0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0xf8, 0x1f, 0x02, 0x18,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0xe0, 0x07, 0x02, 0x08, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0xe0, 0x07, 0x06, 0x0c, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x60, 0x43, 0xc0, 0x03, 0x06, 0x04, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x40, 0x67, 0xc0, 0x03, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x40, 0x27, 0xc0, 0x03, 0xe4, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xc0, 0x2d, 0xc0, 0x03, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
   0x38, 0xc0, 0x01, 0xf4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x30,
   0xc0, 0x01, 0x9c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0xc0,
   0x01, 0x8c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0xc0, 0x01,
   0x8c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x30, 0xc0, 0x01, 0x06,
   0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xc0, 0x01, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
   0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00
};
                                                      // End bootup logo
const int potPin = 0;                                 // analog pin A0 used to connect the potentiometer
int potVal;                                           // variable to read the value from the analog pin

const int triggerButtonPin = 2;                       // Button on pin 2 - with resistor to ground
const int relayPin = 3;                               // Relay on pin 3 - with resistor to ground
const int redLED = 9;                                 // Red LED on pin 9 - with resistor to ground
const int greenLED = 8;                               // Green LED on pin 8 - with resistor to ground

int triggerSwitch = 0;                                // Variables to store data
int stringWidth = 0;


void setup() {                                        // Setup runs first and only once

pinMode(triggerButtonPin, INPUT);
pinMode(relayPin, OUTPUT);
pinMode(redLED, OUTPUT);
pinMode(greenLED, OUTPUT);

digitalWrite(greenLED, HIGH);                     // Initialize with green LED illuminated and red off
digitalWrite(redLED, LOW);

  u8g.firstPage();                                // picture loop  
  do {
    drawFirst();
  } while( u8g.nextPage() );
  delay(3600);
  
}


void loop() {                                     // Loop runs over and over forever.
  u8g.firstPage();                                // picture loop  
  do {
    draw();
  } while( u8g.nextPage() );
  
            
  potVal = analogRead(potPin);                    // reads the value of the potentiometer (value between 0 and 1023)
  potVal = map(potVal, 0, 1023, 10, 500);         // scale it to use it get the right time (value between 10 and 500)

  triggerSwitch = digitalRead(triggerButtonPin);  // Read the trigger button to see if its pressed

  if (triggerSwitch == HIGH){                     // Double pulse with small delay in between
        digitalWrite(relayPin, HIGH);             // First Pulse
        lightRed();
        delay(potVal);                            // milliseconds of Potentiometer Value.
        
        digitalWrite(relayPin, LOW);
        lightGreen();
        delay(100);                                // Fixed delay between double pulse
        
        digitalWrite(relayPin, HIGH);             // Second Pulse
        lightRed();
        delay(potVal);                            // milliseconds of Potentiometer Value.
                
        digitalWrite(relayPin, LOW);              // !!! - CAUTION - !!!
        lightGreen();                             // Weld will restart if the button remains pressed for more than 1000ms.
        delay(1000);                              // Gives the welder at least a 1 second rest between welds.
  }
  
}

void drawFirst() {
  u8g.drawXBM( 24, 0, w3_logo_width, w3_logo_height, w3_logo_bits);
}


void draw() {                                     // graphic commands to redraw the complete screen
  u8g.setFont(u8g_font_tpss);
  u8g.drawStr( 0, 10, "HotTips-3000"); 
  u8g.drawRFrame(0, 16, 128, 34, 4);              // (x pos, y pos, width, height, corner radius)
  u8g.setScale2x2();
  u8g.setPrintPos(10,21);
  u8g.print(potVal );
  u8g.drawStr( 40, 20, "ms");
  u8g.undoScale();
  u8g.drawStr( 35, 64, "#intentionalrobots");
}


void lightRed() {                                 // functions for illuminating LEDs
  digitalWrite(redLED, HIGH);
  digitalWrite(greenLED, LOW);
}


void lightGreen() {
  digitalWrite(redLED, LOW);
  digitalWrite(greenLED, HIGH);
}
